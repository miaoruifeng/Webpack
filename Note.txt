#听课笔记

////////////////////////////////////////

2-1、2-2  什么是模块打包工具
##安装webpack
1. 当前目录下， npm init ---(生成package.json)
2. npm install webpack-cli --save-dev
3. npm install webpack(可有可无)
4. npx webpack index.js(用webpack对index.js进行打包)

### webpack是一个模块打包工具 --- ES Module模块引入方式
#还有别的模块引入：
	CommonJS 模块引入规范（nodeJs）
	CMD
	AMD

Q：阅读webpack官方文档（英文版） ---Modules相关内容

2-3、 搭建webpack环境
tips: webpack是基于node开发的模块打包工具 本质是node实现的

##全局安装
安装： 
	npm install webpack webapck-cli -g
	tip: webpack -v 查看是否安装成功
卸载webpack：
	npm uninstall webpack webapck-cli -g

##项目中安装webpack
安装： 
	npm install webpack webapck-cli -D(或--save-dev)
	tip： npx webpack -v 查看是否安装成功
	npx 会在当前目录下的 modules 里面找webpack

	tips: npm init -y ---自动初始化
		  npm info webapck ---查看webpack历史版本
		  npm install webpack@版本号 webapck-cli -D ---安装指定版本的webpack

### 局部安装 可以在不同的项目中使用不同版本的webpack

2-4、 使用webpack配置文件

##配置文件webpack.config.js
1、运行npx webapck index.js 实际上是用webpack默认配置进行打包的，默认打包好之后生成dist目录下的main.js
2、而项目中可以自己进行webpack配置
根目录下新建 webpack.config.js 进行配置打包 --- 可以自定义入口文件  打包好之后的文件目录
此时直接运行npx webpack 即可运行
tips: 运行npx webpack  默认配置文件名必须是webpack.config.js
	 如果想用自定义文件名 则需要运行：npx webpack --config webpackconfig.js（自定义配置文件名）

## 项目结构目录优化（eg: test）
1、源文件放到src目录下
2、修改webpack.config.js的打包入口文件路径

## npm scripts 简化代码
在package.js的script里配置： "bundle": "webpack"
然后执行 npm run bundle命令即可启动  不需用npx webpack启动了


###小结： 三种方式webpack打包
1、global
   webpack index.js
2、local
   npx webpack index.js
3、npm scripts
   npm run bundle --> webpack

tips: webpack-cli的作用是 使得能在命令行里运行webpack命令

Q：阅读webpack官方文档（英文版） --- GUIDES -> Getting Started相关内容


///////////////////////////////////////

3-1、什么是Loader
Q：a. webpack 是什么
   b. 模块是什么
   c. webpack 的配置文件的作用是什么
## webpack不能识别非js结尾的文件， 所有需要loader来让webpack识别（loader即是webpack打包的一种方案）

3-2、使用loader打包静态资源（图片篇）
## file-loader
1. 配置打包生产的图片文件名称；
2. 配置图片路径
## url-loader
打包图片资源，会吧图片转换成一个base64的字符串，然后直接放到bundle.js里，而不是直接生成图片文件
优点：省了一次http请求
缺点：加载js文件时间比较长，影响页面渲染速度
所以：适合小图片（几kb），大图片不适合
所以进一步配置loader： 添加配置limit：2048字节（2kb）
图片小于2048字节，会直接打包到js文件里，大于2048则打包成单独的图片文件
tips: url-loader与file-loader类似，不过多了一个limit配置项

Q: 阅读url-loader、file-loader官方文档

3-3、使用loader打包静态资源（样式篇-上）
## style-loader  css-loader

## 使用sass --- sass-loader
1. 安装sass --- npm install sass-loader node-sass --save-dev
2. 配置scss，并引入sass-loader
3. 注意配置顺序：loader执行顺序：从下到上 从右到左
	'style-loader': 将js字符串转换成style节点
	'css-loader': 将css转换成CommonJs模块
	'sass-loader': 将 sass 编译成 css
## css厂商前缀 --- postcss-loader
1. 配置 postcss-loader
2. 根目录下新建postcss.config.js
3. 依赖第三方插件 --- autoprefixer 进行配置 
tips: 需要在package.json里配置browserslist才能起作用

3-3、使用loader打包静态资源（样式篇-下）
## 配置importLoaders --- 保证有引用多次的css文件都能执行
## css模块化