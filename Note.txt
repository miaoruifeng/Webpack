#听课笔记

////////////////////////////////////////

2-1、2-2  什么是模块打包工具
##安装webpack
1. 当前目录下， npm init ---(生成package.json)
2. npm install webpack-cli --save-dev
3. npm install webpack(可有可无)
4. npx webpack index.js(用webpack对index.js进行打包)

### webpack是一个模块打包工具 --- ES Module模块引入方式
#还有别的模块引入：
	CommonJS 模块引入规范（nodeJs）
	CMD
	AMD

Q：阅读webpack官方文档（英文版） ---Modules相关内容

2-3、 搭建webpack环境
tips: webpack是基于node开发的模块打包工具 本质是node实现的

##全局安装
安装： 
	npm install webpack webapck-cli -g
	tip: webpack -v 查看是否安装成功
卸载webpack：
	npm uninstall webpack webapck-cli -g

##项目中安装webpack
安装： 
	npm install webpack webapck-cli -D(或--save-dev)
	tip： npx webpack -v 查看是否安装成功
	npx 会在当前目录下的 modules 里面找webpack

	tips: npm init -y ---自动初始化
		  npm info webapck ---查看webpack历史版本
		  npm install webpack@版本号 webapck-cli -D ---安装指定版本的webpack

### 局部安装 可以在不同的项目中使用不同版本的webpack

2-4、 使用webpack配置文件

##配置文件webpack.config.js
1、运行npx webapck index.js 实际上是用webpack默认配置进行打包的，默认打包好之后生成dist目录下的main.js
2、而项目中可以自己进行webpack配置
根目录下新建 webpack.config.js 进行配置打包 --- 可以自定义入口文件  打包好之后的文件目录
此时直接运行npx webpack 即可运行
tips: 运行npx webpack  默认配置文件名必须是webpack.config.js
	 如果想用自定义文件名 则需要运行：npx webpack --config webpackconfig.js（自定义配置文件名）

## 项目结构目录优化（eg: test）
1、源文件放到src目录下
2、修改webpack.config.js的打包入口文件路径

## npm scripts 简化代码
在package.js的script里配置： "bundle": "webpack"
然后执行 npm run bundle命令即可启动  不需用npx webpack启动了


###小结： 三种方式webpack打包
1、global
   webpack index.js
2、local
   npx webpack index.js
3、npm scripts
   npm run bundle --> webpack

tips: webpack-cli的作用是 使得能在命令行里运行webpack命令

Q：阅读webpack官方文档（英文版） --- GUIDES -> Getting Started相关内容


///////////////////////////////////////

3-1、什么是Loader
Q：a. webpack 是什么
   b. 模块是什么
   c. webpack 的配置文件的作用是什么
## webpack不能识别非js结尾的文件， 所有需要loader来让webpack识别（loader即是webpack打包的一种方案）

3-2、使用loader打包静态资源（图片篇）
## file-loader
1. 配置打包生产的图片文件名称；
2. 配置图片路径
## url-loader
打包图片资源，会吧图片转换成一个base64的字符串，然后直接放到bundle.js里，而不是直接生成图片文件
优点：省了一次http请求
缺点：加载js文件时间比较长，影响页面渲染速度
所以：适合小图片（几kb），大图片不适合
所以进一步配置loader： 添加配置limit：2048字节（2kb）
图片小于2048字节，会直接打包到js文件里，大于2048则打包成单独的图片文件
tips: url-loader与file-loader类似，不过多了一个limit配置项

Q: 阅读url-loader、file-loader官方文档

3-3、使用loader打包静态资源（样式篇-上）
## style-loader  css-loader

## 使用sass --- sass-loader
1. 安装sass --- npm install sass-loader node-sass --save-dev
2. 配置scss，并引入sass-loader
3. 注意配置顺序：loader执行顺序：从下到上 从右到左
	'style-loader': 将js字符串转换成style节点
	'css-loader': 将css转换成CommonJs模块
	'sass-loader': 将 sass 编译成 css
## css厂商前缀 --- postcss-loader
1. 配置 postcss-loader
2. 根目录下新建postcss.config.js
3. 依赖第三方插件 --- autoprefixer 进行配置 
tips: 需要在package.json里配置browserslist才能起作用

3-3、使用loader打包静态资源（样式篇-下）
## 配置importLoaders --- 保证有引用多次的css文件都能执行
## css打包模块化 --- css Module -> css 只在对应模块里有效
## 使用webpack打包字体文件 --- 使用file-loader打包

Q: 阅读官网相关：GUIDES -> Asset-Management
				关于样式打包相关Loaders

3-5、使用plugins让打包更便捷
## webpack中 plugin 的作用： 
   plugin可以在webpack运行在某个时刻的时候，帮你做一些事（类似vue生命周期钩子）

1. htmlWebpackPlugin 插件  --- npm install html-webpack-plugin 
   会在打包结束后自动生成html文件 并把打包生成的js自动引入到html文件中
   htmlWebpackPlugin 中可以配置模板文件 --> src/index.html
2. cleanWebpackPlugin 插件 --- npm instll clean-webpack-plugin
   会在打包之前移除dist目录，然后重新打包

3-6、Entry 与 Output 的基础配置
1. entry 和 output 在打包多个文件时如何配置
   entry 的键对应 output的那么占位符

2. 若打包的js文件需要放到特定的域名下  则配置output --> publicPath 

Q: 阅读官网CONFIGRATION --> oUTPUT 相关配置项   Output Management相关

3-7、 sourceMap --- 一种映射关系，映射到入口文件（报错时定位错误）
	配置：devtool: 'source-map'

3-8、使用webpackDevServer提升开发效率
## 当源代码发生变化 自动打包 --- 三种方法
1. watch --> package.json里scripts配置： "watch": "webpack --watch"
   特点：不需要手动打包，但是不会起一个服务器，即不能进行ajax调试，而且需要手动刷新浏览器
2. devServer --- 配置contentBase  --- 运行在服务端
   不但监听到文件发生改变并自动打包，会启动http服务器，而且还会自动刷新浏览器
3. 添加 open属性
   还可以自动打开浏览器

### 扩展：自定义server  --- 通过node express 和 webpack-dev-middleware
npm install express webpack-dev-middleware -D

tips:  a. 在node中直接使用webpack
	   b. 在命令行里使用webpack
Q：GUIDES -> Development,  API -> , CONFIGURATION -> Devserver、Devtool

3-9、3-10、Hot Module Replacement（HMR） 热模块更新
## 配置hmr 
1. css 实现hmr
   更改css时，js渲染出的页面结构不会改变（不会刷新页面），只是改css样式
   css 之所以不需要监控变化 是因为css-loader底层已经实现了监控
2. js
   当引入多了模块时，如果一个模块代码发生改变 只更新这块代码 不影响别的模块的代码
   需要手动监控变化了的模块 --> module.hot.accept()

tips: 例如Vue中不需要监控也是因为vue-loader底层也实现了监控
Q：GUIDES/API -> Hot Module Replacement

3-11、使用babel处理 ES6 语法
1. 安装相关 并配置
   npm install --save-dev babel-loader @babel/core
   npm install @babel/preset-env --save-dev   --> ES6语法转ES5
2. npm install --save @babel/polyfill
   部分属性没有 需要babel/polyfill实现
3. 配置presets --> useBuildIns: 'usage'
   polyfill按需引入：根据业务代码需求 来注入pollyfill对应的内容
   排除不需要转换的 减小打包生成文件的体积

tips:
	如果写的是业务代码 则只需要引入@babel/pollyfill 并配置presets；
	如果写的类库项目代码 则使用@babel/plugin-transform-runtime插件，
	可以有效避免pollyfill的问题（pollyfill会污染全局环境）

## 若babel相关配置options代码太多 可以在更目录下新建 .babelrc文件 放进去

////////////////////////////////////////
4-1、Tree Shaking 概念详解
1. Tree Shaking 只支持ES Module引入，不支持CommonJs引入   （development环境）
	因为ES Module底层是静态引入，而CommonJs底层是动态引入
2. tree shaking 作用是对一个模块进行处理，引入的部分做打包，不引入的内容剔除掉
   配置 webpack.config.js: optimization --> usedExports: true
   (production环境不需用配置optimization)
3. 配置package.json 
   sideEffects: false
   只要运用了tree shaking， 则打包是就会运用这种方式打包
   当引入类似 @babel/polly-fill的模块时，实际并没有导出任何的内容，所以打包时会剔除掉，这样打包会出错
   所以需要对这种文件需要做特殊的处理，即配置sideEffects：["@babel/polly-fill"]
   设置成false 即认为运用了tree shaking方式打包时不需要做任何处理

tips: 特殊处理css文件  默认引入的css文件都需要做处理 --> sideEffects: ["*.css"]

4-2、development 和 production 模式的区分打包
1. 根目录下创建两个配置： webpack.dev.js / webpack.prod.js
2. package.json里建两个命里： dev / build 
3. 二者重复代码处理
   根目录下新建 webpack.common.js  进行代码合并
4. 合并： 
   安装第三方模块： npm install webpack-merge -D  
   引入merge 和 commonConfig  然后再导出
5. 新建build文件夹 把三个配置文件放进去 并修改package.json里的启动路径

4-3 4-4、webpack和code spliting (代码分割)
tips: 代码分割与webpack无关
## 安装lodash 工具库  可以同步 & 异步获取
1. 同步代码：通过配置 然后编写同步代码 实现代码分割
   只需要在webpack.common.js配置optimization -> splitChunks -> chunks: all
2. 异步代码：即便不配置 写成异步载入组件也可以实现
   无需做任何配置 会自动进行代码分割  放到新的文件中

4-5 4-6、SplitChunksPlugin 配置参数详解
1. 自定义lodash文件名 -- 魔法注释
## 异步代码过程中 实际上配置项对其有影响
   不配置时打包生成的文件前面带有vendors 配置了之后没有就没了 （配置cacheGroups）
   所以 不管是同步还是异步代码分割  都要用SplitChunksPlugin
## SplitChunksPlugin 相关配置

4-7、Lazy Loading懒加载
## 通过import 异步加载一个模块 
## chunk概念 --- 打包生成的每一个js文件都是chunk
### 代码分割 splitChunks 配置相关说明：
/* 以下配置都是默认配置 所以可以省略 */
   minSize: 30000, // >30kb 才进行代码分割
   maxSize: 0,
   minChunks: 1, // 打包生成的chunks有几个用到当前模块 只要有一个用到就分割代码
   maxAsyncRequests: 5,
   maxInitialRequests: 3,
   automaticNameDelimiter: '~',
   automaticNameMaxLength: 30,
   name: true,
   cacheGroups: {
      // vendors: false,
      // default: false
      vendors: {
         test: /[\\/]node_modules[\\/]/, // 如果是从node_modules引入的模块 则打包到vendors.js里面，其他的打包到common.js
         priority: -10, // 优先级
         // filename: 'vendors.js'
      },
      default: {
         minChunks: 2,
         priority: -20, // 优先级
         reuseExistingChunk: true, // 如果一个模块被 打包过 则不会再次被打包
         filename: 'common.js'
      }
   }

4-8、打包分析、 Preloading、 Prefetching
## 打包分析 - 对打包生成的代码进行分析
   webpack分析工具 ---  https://github.com/webpack/analyse
   package.json配置 -- 打包过程中把打包过程中的描述生成stats.json文件
官网推荐：GUIDES -> Code Splitting -> Bundle Analyse -> Webapck-bundle-analyser
## Preloading / Prefetching  
   加载完主体内容  在带宽空闲时加载  然后再次加载时利用本地缓存 从而提高性能
   Prefetching：核心代码加载完 页面空闲时再加载prefetching对应的文件
   Preloading：是和主文件一起加载的
   所以用Prefetching比较合适
tips: 前端解决优化问题，不应该把重点放在缓存上 而是更应该注重代码复用率 code coverange

4-9、css文件的代码分割
## css代码分割借助插件 - MiniCssExtractPlugin （production环境使用）
## 压缩打包多个css文件 - 安装插件：npm install optimize-css-assets-webpack-plugin -D
## 如果多了入口文件引入的多个css文件最后打包到一个css文件中 则通过配置 splitChunks - cacheGroups 实现
## 打包自己对应自己的css文件 也可根据splitChunks - cacheGroups配置实现（具体看官网说明）

